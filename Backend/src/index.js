import app from "./app.js";
import { connectDB } from "./db.js";
import mongoose from "mongoose";

async function main() {
    try {
        // Conectar a MongoDB
        await connectDB();
        console.log('‚úÖ MongoDB conectado correctamente');

        // Inicializar servicios
        await app.initializeServices();

        // Iniciar servidor principal
        app.mainApp.listen(app.MAIN_PORT, () => {
            console.log(`üöÄ Servidor principal corriendo en puerto ${app.MAIN_PORT}`);
            console.log(`üåç Ambiente: ${process.env.NODE_ENV}`);
            console.log(`üìÖ Fecha de inicio: ${new Date().toISOString()}`);
        });

        // Iniciar servidor de sincronizaci√≥n
        app.syncApp.listen(app.SYNC_PORT, () => {
            console.log(`üìä Servidor de sincronizaci√≥n corriendo en puerto ${app.SYNC_PORT}`);
        });

    } catch (error) {
        console.error('‚ùå Error durante el inicio:', error);
        await cleanup();
        process.exit(1);
    }
}

// Funci√≥n de limpieza
async function cleanup() {
    try {
        await mongoose.connection.close();
        console.log('‚úÖ Conexiones cerradas correctamente');
    } catch (error) {
        console.error('‚ùå Error durante el cierre:', error);
    }
}

// Manejo de cierre graceful
process.on('SIGINT', async () => {
    console.log('\nüõë Iniciando cierre graceful...');
    await cleanup();
    process.exit(0);
});

// Manejo de errores no capturados
process.on('uncaughtException', async (error) => {
    console.error('‚ùå Error no capturado:', error);
    await cleanup();
    process.exit(1);
});

process.on('unhandledRejection', async (reason) => {
    console.error('‚ùå Promesa rechazada no manejada:', reason);
    await cleanup();
    process.exit(1);
});

// Iniciar la aplicaci√≥n
main().catch(async (error) => {
    console.error('‚ùå Error fatal:', error);
    await cleanup();
    process.exit(1);
});